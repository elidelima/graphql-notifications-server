# source: https://us1.prisma.sh/jonathasruiz1-7d2d8c/database/dev
# timestamp: Fri Oct 05 2018 14:04:56 GMT-0300 (Hora oficial do Brasil)

type AggregateNotification {
  count: Int!
}

type AggregateNotificationDetail {
  count: Int!
}

type AggregateNotificationDetails {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createNotification(data: NotificationCreateInput!): Notification!
  createNotificationDetails(data: NotificationDetailsCreateInput!): NotificationDetails!
  createNotificationDetail(data: NotificationDetailCreateInput!): NotificationDetail!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateNotificationDetail(data: NotificationDetailUpdateInput!, where: NotificationDetailWhereUniqueInput!): NotificationDetail
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotificationDetail(where: NotificationDetailWhereUniqueInput!): NotificationDetail
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  upsertNotificationDetail(where: NotificationDetailWhereUniqueInput!, create: NotificationDetailCreateInput!, update: NotificationDetailUpdateInput!): NotificationDetail!
  updateManyNotifications(data: NotificationUpdateInput!, where: NotificationWhereInput): BatchPayload!
  updateManyNotificationDetailses(data: NotificationDetailsUpdateInput!, where: NotificationDetailsWhereInput): BatchPayload!
  updateManyNotificationDetails(data: NotificationDetailUpdateInput!, where: NotificationDetailWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteManyNotificationDetailses(where: NotificationDetailsWhereInput): BatchPayload!
  deleteManyNotificationDetails(where: NotificationDetailWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notification implements Node {
  id: ID!
  memberNumber: String!
  createdOn: String!
  situation: SituationEnum!
  detail: NotificationDetail
  readOn: String
  timeToLive: String!
  lastUpdated: String!
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  memberNumber: String!
  createdOn: String!
  situation: SituationEnum!
  readOn: String
  timeToLive: String!
  lastUpdated: String!
  detail: NotificationDetailCreateOneInput
}

type NotificationDetail {
  code: String!
  description: String!
  action: String
  priority: PriorityEnum
  lastUpdated: String
}

"""A connection to a list of items."""
type NotificationDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationDetailEdge]!
  aggregate: AggregateNotificationDetail!
}

input NotificationDetailCreateInput {
  code: String!
  description: String!
  action: String
  priority: PriorityEnum
  lastUpdated: String
}

input NotificationDetailCreateManyInput {
  create: [NotificationDetailCreateInput!]
  connect: [NotificationDetailWhereUniqueInput!]
}

input NotificationDetailCreateOneInput {
  create: NotificationDetailCreateInput
  connect: NotificationDetailWhereUniqueInput
}

"""An edge in a connection."""
type NotificationDetailEdge {
  """The item at the end of the edge."""
  node: NotificationDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationDetailOrderByInput {
  code_ASC
  code_DESC
  description_ASC
  description_DESC
  action_ASC
  action_DESC
  priority_ASC
  priority_DESC
  lastUpdated_ASC
  lastUpdated_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NotificationDetailPreviousValues {
  code: String!
  description: String!
  action: String
  priority: PriorityEnum
  lastUpdated: String
}

type NotificationDetails {
  notificationDetails(where: NotificationDetailWhereInput, orderBy: NotificationDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationDetail!]
  nextToken: String
}

"""A connection to a list of items."""
type NotificationDetailsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationDetailsEdge]!
  aggregate: AggregateNotificationDetails!
}

input NotificationDetailsCreateInput {
  nextToken: String
  notificationDetails: NotificationDetailCreateManyInput
}

"""An edge in a connection."""
type NotificationDetailsEdge {
  """The item at the end of the edge."""
  node: NotificationDetails!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationDetailsOrderByInput {
  nextToken_ASC
  nextToken_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NotificationDetailsPreviousValues {
  nextToken: String
}

type NotificationDetailsSubscriptionPayload {
  mutation: MutationType!
  node: NotificationDetails
  updatedFields: [String!]
  previousValues: NotificationDetailsPreviousValues
}

input NotificationDetailsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationDetailsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationDetailsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationDetailsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationDetailsWhereInput
}

type NotificationDetailSubscriptionPayload {
  mutation: MutationType!
  node: NotificationDetail
  updatedFields: [String!]
  previousValues: NotificationDetailPreviousValues
}

input NotificationDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationDetailWhereInput
}

input NotificationDetailsUpdateInput {
  nextToken: String
  notificationDetails: NotificationDetailUpdateManyInput
}

input NotificationDetailsWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationDetailsWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationDetailsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationDetailsWhereInput!]
  nextToken: String

  """All values that are not equal to given value."""
  nextToken_not: String

  """All values that are contained in given list."""
  nextToken_in: [String!]

  """All values that are not contained in given list."""
  nextToken_not_in: [String!]

  """All values less than the given value."""
  nextToken_lt: String

  """All values less than or equal the given value."""
  nextToken_lte: String

  """All values greater than the given value."""
  nextToken_gt: String

  """All values greater than or equal the given value."""
  nextToken_gte: String

  """All values containing the given string."""
  nextToken_contains: String

  """All values not containing the given string."""
  nextToken_not_contains: String

  """All values starting with the given string."""
  nextToken_starts_with: String

  """All values not starting with the given string."""
  nextToken_not_starts_with: String

  """All values ending with the given string."""
  nextToken_ends_with: String

  """All values not ending with the given string."""
  nextToken_not_ends_with: String
  notificationDetails_every: NotificationDetailWhereInput
  notificationDetails_some: NotificationDetailWhereInput
  notificationDetails_none: NotificationDetailWhereInput
}

input NotificationDetailUpdateDataInput {
  code: String
  description: String
  action: String
  priority: PriorityEnum
  lastUpdated: String
}

input NotificationDetailUpdateInput {
  code: String
  description: String
  action: String
  priority: PriorityEnum
  lastUpdated: String
}

input NotificationDetailUpdateManyInput {
  create: [NotificationDetailCreateInput!]
  connect: [NotificationDetailWhereUniqueInput!]
  disconnect: [NotificationDetailWhereUniqueInput!]
  delete: [NotificationDetailWhereUniqueInput!]
  update: [NotificationDetailUpdateWithWhereUniqueNestedInput!]
  upsert: [NotificationDetailUpsertWithWhereUniqueNestedInput!]
}

input NotificationDetailUpdateOneInput {
  create: NotificationDetailCreateInput
  connect: NotificationDetailWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NotificationDetailUpdateDataInput
  upsert: NotificationDetailUpsertNestedInput
}

input NotificationDetailUpdateWithWhereUniqueNestedInput {
  where: NotificationDetailWhereUniqueInput!
  data: NotificationDetailUpdateDataInput!
}

input NotificationDetailUpsertNestedInput {
  update: NotificationDetailUpdateDataInput!
  create: NotificationDetailCreateInput!
}

input NotificationDetailUpsertWithWhereUniqueNestedInput {
  where: NotificationDetailWhereUniqueInput!
  update: NotificationDetailUpdateDataInput!
  create: NotificationDetailCreateInput!
}

input NotificationDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationDetailWhereInput!]
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  action: String

  """All values that are not equal to given value."""
  action_not: String

  """All values that are contained in given list."""
  action_in: [String!]

  """All values that are not contained in given list."""
  action_not_in: [String!]

  """All values less than the given value."""
  action_lt: String

  """All values less than or equal the given value."""
  action_lte: String

  """All values greater than the given value."""
  action_gt: String

  """All values greater than or equal the given value."""
  action_gte: String

  """All values containing the given string."""
  action_contains: String

  """All values not containing the given string."""
  action_not_contains: String

  """All values starting with the given string."""
  action_starts_with: String

  """All values not starting with the given string."""
  action_not_starts_with: String

  """All values ending with the given string."""
  action_ends_with: String

  """All values not ending with the given string."""
  action_not_ends_with: String
  priority: PriorityEnum

  """All values that are not equal to given value."""
  priority_not: PriorityEnum

  """All values that are contained in given list."""
  priority_in: [PriorityEnum!]

  """All values that are not contained in given list."""
  priority_not_in: [PriorityEnum!]
  lastUpdated: String

  """All values that are not equal to given value."""
  lastUpdated_not: String

  """All values that are contained in given list."""
  lastUpdated_in: [String!]

  """All values that are not contained in given list."""
  lastUpdated_not_in: [String!]

  """All values less than the given value."""
  lastUpdated_lt: String

  """All values less than or equal the given value."""
  lastUpdated_lte: String

  """All values greater than the given value."""
  lastUpdated_gt: String

  """All values greater than or equal the given value."""
  lastUpdated_gte: String

  """All values containing the given string."""
  lastUpdated_contains: String

  """All values not containing the given string."""
  lastUpdated_not_contains: String

  """All values starting with the given string."""
  lastUpdated_starts_with: String

  """All values not starting with the given string."""
  lastUpdated_not_starts_with: String

  """All values ending with the given string."""
  lastUpdated_ends_with: String

  """All values not ending with the given string."""
  lastUpdated_not_ends_with: String
}

input NotificationDetailWhereUniqueInput {
  code: String
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge."""
  node: Notification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  memberNumber_ASC
  memberNumber_DESC
  createdOn_ASC
  createdOn_DESC
  situation_ASC
  situation_DESC
  readOn_ASC
  readOn_DESC
  timeToLive_ASC
  timeToLive_DESC
  lastUpdated_ASC
  lastUpdated_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  memberNumber: String!
  createdOn: String!
  situation: SituationEnum!
  readOn: String
  timeToLive: String!
  lastUpdated: String!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

input NotificationUpdateInput {
  memberNumber: String
  createdOn: String
  situation: SituationEnum
  readOn: String
  timeToLive: String
  lastUpdated: String
  detail: NotificationDetailUpdateOneInput
}

input NotificationWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  memberNumber: String

  """All values that are not equal to given value."""
  memberNumber_not: String

  """All values that are contained in given list."""
  memberNumber_in: [String!]

  """All values that are not contained in given list."""
  memberNumber_not_in: [String!]

  """All values less than the given value."""
  memberNumber_lt: String

  """All values less than or equal the given value."""
  memberNumber_lte: String

  """All values greater than the given value."""
  memberNumber_gt: String

  """All values greater than or equal the given value."""
  memberNumber_gte: String

  """All values containing the given string."""
  memberNumber_contains: String

  """All values not containing the given string."""
  memberNumber_not_contains: String

  """All values starting with the given string."""
  memberNumber_starts_with: String

  """All values not starting with the given string."""
  memberNumber_not_starts_with: String

  """All values ending with the given string."""
  memberNumber_ends_with: String

  """All values not ending with the given string."""
  memberNumber_not_ends_with: String
  createdOn: String

  """All values that are not equal to given value."""
  createdOn_not: String

  """All values that are contained in given list."""
  createdOn_in: [String!]

  """All values that are not contained in given list."""
  createdOn_not_in: [String!]

  """All values less than the given value."""
  createdOn_lt: String

  """All values less than or equal the given value."""
  createdOn_lte: String

  """All values greater than the given value."""
  createdOn_gt: String

  """All values greater than or equal the given value."""
  createdOn_gte: String

  """All values containing the given string."""
  createdOn_contains: String

  """All values not containing the given string."""
  createdOn_not_contains: String

  """All values starting with the given string."""
  createdOn_starts_with: String

  """All values not starting with the given string."""
  createdOn_not_starts_with: String

  """All values ending with the given string."""
  createdOn_ends_with: String

  """All values not ending with the given string."""
  createdOn_not_ends_with: String
  situation: SituationEnum

  """All values that are not equal to given value."""
  situation_not: SituationEnum

  """All values that are contained in given list."""
  situation_in: [SituationEnum!]

  """All values that are not contained in given list."""
  situation_not_in: [SituationEnum!]
  readOn: String

  """All values that are not equal to given value."""
  readOn_not: String

  """All values that are contained in given list."""
  readOn_in: [String!]

  """All values that are not contained in given list."""
  readOn_not_in: [String!]

  """All values less than the given value."""
  readOn_lt: String

  """All values less than or equal the given value."""
  readOn_lte: String

  """All values greater than the given value."""
  readOn_gt: String

  """All values greater than or equal the given value."""
  readOn_gte: String

  """All values containing the given string."""
  readOn_contains: String

  """All values not containing the given string."""
  readOn_not_contains: String

  """All values starting with the given string."""
  readOn_starts_with: String

  """All values not starting with the given string."""
  readOn_not_starts_with: String

  """All values ending with the given string."""
  readOn_ends_with: String

  """All values not ending with the given string."""
  readOn_not_ends_with: String
  timeToLive: String

  """All values that are not equal to given value."""
  timeToLive_not: String

  """All values that are contained in given list."""
  timeToLive_in: [String!]

  """All values that are not contained in given list."""
  timeToLive_not_in: [String!]

  """All values less than the given value."""
  timeToLive_lt: String

  """All values less than or equal the given value."""
  timeToLive_lte: String

  """All values greater than the given value."""
  timeToLive_gt: String

  """All values greater than or equal the given value."""
  timeToLive_gte: String

  """All values containing the given string."""
  timeToLive_contains: String

  """All values not containing the given string."""
  timeToLive_not_contains: String

  """All values starting with the given string."""
  timeToLive_starts_with: String

  """All values not starting with the given string."""
  timeToLive_not_starts_with: String

  """All values ending with the given string."""
  timeToLive_ends_with: String

  """All values not ending with the given string."""
  timeToLive_not_ends_with: String
  lastUpdated: String

  """All values that are not equal to given value."""
  lastUpdated_not: String

  """All values that are contained in given list."""
  lastUpdated_in: [String!]

  """All values that are not contained in given list."""
  lastUpdated_not_in: [String!]

  """All values less than the given value."""
  lastUpdated_lt: String

  """All values less than or equal the given value."""
  lastUpdated_lte: String

  """All values greater than the given value."""
  lastUpdated_gt: String

  """All values greater than or equal the given value."""
  lastUpdated_gte: String

  """All values containing the given string."""
  lastUpdated_contains: String

  """All values not containing the given string."""
  lastUpdated_not_contains: String

  """All values starting with the given string."""
  lastUpdated_starts_with: String

  """All values not starting with the given string."""
  lastUpdated_not_starts_with: String

  """All values ending with the given string."""
  lastUpdated_ends_with: String

  """All values not ending with the given string."""
  lastUpdated_not_ends_with: String
  detail: NotificationDetailWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PriorityEnum {
  LOW
  MEDIUM
  HIGH
}

type Query {
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationDetailses(where: NotificationDetailsWhereInput, orderBy: NotificationDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationDetails]!
  notificationDetails(where: NotificationDetailWhereInput, orderBy: NotificationDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationDetail]!
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationDetail(where: NotificationDetailWhereUniqueInput!): NotificationDetail
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  notificationDetailsesConnection(where: NotificationDetailsWhereInput, orderBy: NotificationDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationDetailsConnection!
  notificationDetailsConnection(where: NotificationDetailWhereInput, orderBy: NotificationDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationDetailConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum SituationEnum {
  NEW
  HISTORY
}

type Subscription {
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  notificationDetails(where: NotificationDetailsSubscriptionWhereInput): NotificationDetailsSubscriptionPayload
  notificationDetail(where: NotificationDetailSubscriptionWhereInput): NotificationDetailSubscriptionPayload
}
